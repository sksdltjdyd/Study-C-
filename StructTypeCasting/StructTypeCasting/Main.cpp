#include <cstdio>


/*
구조체[Struct]는 여러 개의 변수들을 하나의 단위로 묶어서 사용할 수 있는 사용자 정의 자료형이다
구조체는 C언어에서 제공하는 기본 자료형이 아니지만, 사용자 정의 자료형으로서 매우 유용하게 사용된다. 구조체를 사용하면 관련된 데이터를 하나의 단위로 묶어서 관리할 수 있어 코드의 가독성과 유지보수성을 높일 수 있다
*/

struct Marine
{
	int hp = 10;
	int damage = 2;
	int defense = 1;

};

int main() {

	/*
	실수 자료형[float]은 4바이트 크기를 가지며, 정수 자료형[int]은 4바이트 크기를 가진다
	변수나 함수의 타입 앞쪽에 작성하여 타입을 설정할수 있다
	*/

	float f = 3.14f; // 실수형 변수
	printf("f = %f\n", f); // 3.14 출력
	fseek(stdin, 0, SEEK_END);
	scanf_s("%f", &f); // 사용자로부터 실수 입력 받기

	/*
	형변환[Struct Type Casting]은 변수의 타입을 다른 타입으로 변환하는 것을 의미한다
	*/

	int i = (int)f; // 실수형 변수를 정수형으로 변환

	printf("i = %d\n", i); // 입력한 정수 값 출력 (소수점 이하가 잘림)

	/*
	암묵적 형변환[Implicit Type Casting]은 컴파일러가 자동으로 타입을 변환하는 것을 의미한다. 예를 들어, 실수형 변수를 정수형 변수에 대입할 때, 컴파일러가 자동으로 형변환을 수행한다

	명시적 형변환[Explicit Type Casting]은 프로그래머가 직접 타입을 변환하는 것을 의미한다. 예를 들어, (int)f와 같이 명시적으로 형변환을 수행할 수 있다

	두가지 형변환은 장단점이 있는데, 암묵적 형변환은 코드가 간결해지지만, 의도치 않은 결과를 초래할 수 있다. 명시적 형변환은 코드가 명확해지지만, 코드가 길어질 수 있다
	*/
	
	Marine m; // Marine 구조체 변수 생성
	m.damage = 5; // Marine 구조체 변수의 damage 멤버에 값 할당
	m.hp = 20; // Marine 구조체 변수의 hp 멤버에 값 할당

	Marine m2;
	m2.damage = 10; // m2 구조체 변수의 damage 멤버에 값 할당

	Marine m3[10]; // Marine 구조체 변수 배열 생성

}