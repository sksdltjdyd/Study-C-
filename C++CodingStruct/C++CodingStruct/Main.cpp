#include <cstdio>

// 빌드[build] : 소프트웨어 프로그램을 컴파일하고 링크하여 실행 가능한 파일을 생성하는 과정
// 컴파일[compile] : 소스 코드를 기계어로 변환하는 과정. 다른 프로	그램 언어로 작성된 코드를 이해할 수 있도록 변환하는 단계. 일반적으로 c/c++ 소스코드는 컴파일을 통해 어셈블리어로 변환됨
// 링크[link] : 여러 개의 오브젝트 파일을 하나의 실행 파일로 결합하는 과정. 컴파일된 코드와 라이브러리, 다른 오브젝트 파일들을 연결하여 최종 실행 파일을 생성함
// 버그[bug] : 프로그램의 오류나 결함. 프로그램이 의도한 대로 작동하지 않거나 예기치 않은 결과를 초래하는 문제를 의미함
// 디버깅[debugging] : 프로그램의 버그를 찾아 수정하는 과정. 코드의 문제를 식별하고 수정하여 프로그램이 올바르게 작동하도록 하는 단계

int main() {
	// Print "Hello, World!" to the console
	printf("Hello, World!\n");

	int a = 100 + 50;

	// 단항연산자 위치의 차이 : ++a는 a를 먼저 증가시키고, 그 다음에 값을 사용함. a++는 a의 현재 값을 사용한 후에 a를 증가시킴. 헷갈리기 쉬워 현업에서는	 차이를 잘 사용하지 않음
	a++;
	++a;

	/*
	참[true] / 거짓[false]의 실체
	참 : 0이 아닌 모든 값
	거짓 : 0
	*/
	int person = 100;
	int age = 20;

	int result = person == age;
	printf("result : %d\n", result); // 0이 아닌 값은 참으로 간주됨

	/*
	while 구문 : 조건이 참인 동안 반복 실행되는 루프 구조. 조건이 거짓이 될 때까지 계속 실행됨
	*/
	int count = 0;
	while (count < 20)
	{
		printf("*");
		count++;
		// count가 20이 될 때까지 *을 출력함
	}

	printf("\n\n");

	/*
	switch 구문 : 변수의 값에 따라 여러 가지 경우 중 하나를 선택하여 실행하는 구조. 각 case에 해당하는 코드를 실행하고, break 문을 만나면 switch 블록을 종료함
	*/
	int value = 3;
	switch (value)
	{
	case 0:
		printf("value is zero\n");
		break;
		
	case 1:
		printf("value is one\n");
		break;
		
	case 2:
		printf("value is two\n");
		break;	
	
	default:
		printf("value is something else\n");
		break;
	}

	/*
	if구문의 장점 : 조건이 참일 때만 실행되는 코드 블록을 작성할 수 있어, 프로그램의 흐름을 제어하는 데 유용함. 여러 조건을 조합하여 복잡한 논리를 구현할 수 있음
	switch 구문의 장점 : 변수의 값에 따라 여러 가지 경우 중 하나를 선택하여 실행할 수 있어, 코드가 간결하고 가독성이 높아짐. 각 case에 대해 별도의 코드를 작성할 수 있어, 다양한 상황을 처리하기 용이함	
	*/

	/*
	변수의 유효범위 : 변수의 유효범위는 변수가 선언된 위치에 따라 결정됨. 지역 변수는 해당 블록 내에서만 유효하고, 전역 변수는 프로그램 전체에서 유효함. 함수 내에서 선언된 변수는 해당 함수 내에서만 접근 가능함
	전역 변수는 프로그램 전체에서 접근 가능하지만, 지역 변수는 해당 블록 내에서만 접근 가능함. 따라서, 지역 변수는 다른 함수나 블록에서 동일한 이름을 사용해도 충돌하지 않음
	쉽게 말하면 {} 블록 내에서 선언된 변수는 그 블록 내에서만 유효하고, 블록 밖에서는 사용할 수 없음. 전역 변수는 프로그램 전체에서 사용할 수 있음
	*/

	// void 함수 : 반환값이 없는 함수. 주로 특정 작업을 수행하고 결과를 반환하지 않는 경우에 사용됨

	return 0;
}