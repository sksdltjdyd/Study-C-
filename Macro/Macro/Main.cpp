#include "Header.h"

#define SWAP(a, b, temp) { temp = a; a = b; b = temp; }
#define P(x, y) x##y // ## 연산자는 매크로에서 토큰을 결합하는 데 사용된다
#define PI 3.141592
#define Excute 1

#if Excute == 0
int main(int argc, char* argv[])
{
	// 매크로 상수는 프로그램의 실행 중에 변경되지 않는 값을 의미한다
	printf("PI: %f\n", PI);
	return 0;
}
#else
int main()
{
	// 매크로 함수는 코드의 가독성을 높이고, 중복을 줄이며, 성능이 좋지만, 디버깅이 어렵고, 타입 안전성이 없으며, 코드 크기가 증가할 수 있고, 스코프가 없다는 단점이 있다
	printf("EEE");
	return 0;
}
#endif


int main()
{
	/*
	전처리기 #
	- 전처리는 모두 #로 시작하는 지시문으로 이루어져 있다
	- #define: 매크로 정의. 이를 이용해 프로그래머가 상수를 정의하거나, 매크로 함수를 정의할 수 있다
	*/

	int v1 = 10;
	int v2 = 20;
	int temp;

	SWAP(v1, v2, temp);
	printf("v1: %d, v2: %d\n", v1, v2);
	// 매크로 함수는 인자에 대한 타입 검사를 하지 않기 때문에, 잘못된 타입을 넣으면 예기치 않은 결과가 나올 수 있다
	/*
	매크로 함수의 장단점
	- 장점
		1. 코드의 가독성을 높인다
		2. 코드의 중복을 줄인다
		3. 성능이 좋다: 매크로 함수는 함수 호출 오버헤드가 없기 때문에, 성능이 좋다
	- 단점
		1. 디버깅이 어렵다: 매크로 함수는 컴파일러에 의해 치환되기 때문에, 디버깅 시 원래의 코드가 아닌 치환된 코드가 나타난다
		2. 타입 안전성이 없다: 매크로 함수는 인자에 대한 타입 검사를 하지 않기 때문에, 잘못된 타입을 넣으면 예기치 않은 결과가 나올 수 있다
		3. 코드 크기가 증가할 수 있다: 매크로 함수는 호출될 때마다 코드가 삽입되므로, 코드 크기가 증가할 수 있다
		4. 스코프가 없다: 매크로 함수는 전역적으로 정의되므로, 이름 충돌이 발생할 수 있다
	- 결론
	- 매크로 함수는 코드의 가독성을 높이고, 중복을 줄이며, 성능이 좋지만, 디버깅이 어렵고, 타입 안전성이 없으며, 코드 크기가 증가할 수 있고, 스코프가 없다는 단점이 있다. 따라서 매크로 함수를 사용할 때는 주의가 필요하다
	*/

	/*
	매크로 상수
	- #define 매크로(전처리)를 사용하면 상수를 정의할 수 있다
	- 상수는 프로그램의 실행 중에 변경되지 않는 값을 의미한다
	*/

	/*
	조건 #if #elif #else #endif
	- #define 매크로와 연계하여 매크로 조건을 넣을 수 있다.
	#if<매크로 조건>
	실행하고 싶은 코드
	#elif<매크로 조건>
	실행하고 싶은 코드
	#else
	실행하고 싶은 코드
	#endif

	사용 하는 이유
	1. 코드의 가독성을 높인다: 조건부 컴파일을 통해 특정 코드 블록을 선택적으로 컴파일할 수 있어, 코드의 가독성을 높일 수 있다
	2. 코드의 유지보수를 용이하게 한다: 특정 조건에 따라 코드를 선택적으로 컴파일할 수 있어, 코드의 유지보수를 용이하게 할 수 있다
	3. 코드의 크기를 줄인다: 특정 조건에 따라 코드를 선택적으로 컴파일할 수 있어, 코드의 크기를 줄일 수 있다
	4. 플랫폼에 따라 다른 코드를 컴파일할 수 있다: 특정 플랫폼에 따라 다른 코드를 선택적으로 컴파일할 수 있어, 플랫폼에 따라 다른 코드를 작성할 수 있다
	5. 디버깅을 용이하게 한다: 특정 조건에 따라 코드를 선택적으로 컴파일할 수 있어, 디버깅을 용이하게 할 수 있다
	*/


	/*
	ifdef #ifndef #else #endif
	#ifdef 매크로 이름 --> 해당 매크로가 정의되어 있으면 실행
	실행하고 싶은 코드
	#else --> else와 같은 역활
	실행하고 싶은 코드
	#endif
	*/

	/*
	#ifndef #else #endif
	#ifndef 매크로 이름 --> 해당 매크로가 정의되어 있지 않으면 실행
	실행하고 싶은 코드
	#else --> else와 같은 역활
	실행하고 싶은 코드
	#endif
	*/


	return 0;
}